import requestsimport osimport refrom urllib.parse import urlparse, urljoindef download_file(url, local_path):    os.makedirs(os.path.dirname(local_path), exist_ok=True)    try:        response = requests.get(url, stream=True)        response.raise_for_status()        with open(local_path, 'wb') as f:            for chunk in response.iter_content(chunk_size=8192):                f.write(chunk)        print(f"Downloaded {url} to {local_path}")        return True    except requests.exceptions.RequestException as e:        print(f"Error downloading {url}: {e}")        return Falsedef download_google_fonts(css_url, base_dir='.'):    css_local_path = os.path.join(base_dir, 'css', 'google-fonts.css')    fonts_dir = os.path.join(base_dir, 'fonts')    os.makedirs(fonts_dir, exist_ok=True)    try:        css_response = requests.get(css_url)        css_response.raise_for_status()        css_content = css_response.text        # Find all font URLs in the CSS        font_urls = re.findall(r'url\((["\']?)(.*?)\1\)', css_content)                for quote, font_url_raw in font_urls:            # Ensure the font URL is absolute            font_url = urljoin(css_url, font_url_raw)            parsed_font_url = urlparse(font_url)            font_filename = os.path.basename(parsed_font_url.path)            font_local_path = os.path.join(fonts_dir, font_filename)            if download_file(font_url, font_local_path):                # Replace the CDN URL with the local path in the CSS content                # Make sure the path is relative to the CSS file                relative_font_path = os.path.relpath(font_local_path, os.path.dirname(css_local_path))                # Fix for Windows paths in CSS (backslashes to forward slashes)                relative_font_path = relative_font_path.replace('\\', '/')                 css_content = css_content.replace(font_url_raw, relative_font_path)        with open(css_local_path, 'w', encoding='utf-8') as f:            f.write(css_content)        print(f"Downloaded Google Fonts CSS to {css_local_path} and associated font files to {fonts_dir}")        return True    except requests.exceptions.RequestException as e:        print(f"Error downloading Google Fonts: {e}")        return Falsedef main():    assets = {        'https://cdn.tailwindcss.com': './css/tailwind.min.css',        'https://cdn.jsdelivr.net/npm/chart.js': './js/chart.min.js',        'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js': './js/jspdf.umd.min.js',        'https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js': './js/jspdf.plugin.autotable.min.js',    }    os.makedirs('css', exist_ok=True)    os.makedirs('js', exist_ok=True)    os.makedirs('fonts', exist_ok=True)    for url, local_path in assets.items():        download_file(url, local_path)    google_fonts_css_url = 'https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap'    download_google_fonts(google_fonts_css_url)    print("\nAll assets downloaded. Please update your indext.html and service-worker.js files as instructed.")if __name__ == "__main__":    main()